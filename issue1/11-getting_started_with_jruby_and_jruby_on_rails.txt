Primeiros Passos com JRuby e JRuby on Rails
por Joshua Moore

Série JRuby - Parte 1

Introdução

Este é o primeiro artigo de uma série sobre JRuby e Rails. Esta primeira parte cobrirá os passos básicos para iniciar com JRuby: introdução, instalação e familiarização com JRuby. Nós iremos finalizar com dicas e precauções que devem ser tomadas para que o uso do JRuby se torne um sonho.

Por que devo me importar?

Antes de começar, por que usar JRuby? O que o JRuby tem a oferecer que o Ruby padrão (MRI) não tem? O que fará valer a pena o tempo gasto aprendendo a usá-lo? Cada pessoa terá respostas diferentes para essas perguntas, da mesma forma que cada pessoa tem motivos diferentes para usar Rails. Um artigo inteiro poderia ser escrito apenas abordando o porquê de usar JRuby; entretanto, nés só temos tempo para considerar 4 bons motivos para usá-lo neste artigo.

Em primeiro lugar, se você já está usando Java você não precisará preparar uma nova infra estrutura de produção. O JRuby é empacotado dentro do arquivo .war, então não há dependências externas. Simplesmente use os servidores de aplicação que você já tem para hospedar suas aplicações Rails. Isso é especialmente útil em ambientes corporativos onde uma mudança só vem depois de longas e difíceis batalhas.

---------------------
Meu nome é Joshua Moore e eu cresci em uma fazenda na Pennsylvania, Estados Unidos. Na fazenda eu aprendi que trabalhar duro não é fácil e que eu não gostava de me sujar. Então eu entrei no mundo da programação de computadores (menos sujo, mas ainda assim trabalhoso). Eu gostava de Java e trabalhei principalmente com desenvolvimento de aplicações desktop até mais ou menos um ano atrás quando eu decidi que não podia mais ignorar o desenvolvimento web (eu evitava porquê eu não queria brigar com vários navegadores pra fazer as minhas aplicações funcionarem direito em todos eles). Porém, com vários navegadores ou não, estou aqui usando Ruby on Rails, principalmente JRuby on Rails, e adorando. Eu escolhi o Rails porque ele é simples, poderoso, e não precisa de configurações. Você me encontrará em meu blog www.codingforrent.com, twitter @kaiping, email: josh@codingforrent.com.
---------------------

Em segundo lugar, o Ruby MRI (versão 1.8.x) não é capaz de tirar vantagem do fato de o Rails ser "thread safe". O JRuby, por outro lado, implementa as threads do Ruby como Javathreads, que são na verdade threads nativas. Isso permite que o JRuby aproveite todas as vantagens de o Rails ser thread safe.

O terceiro motivo é a velocidade. O JRuby é simplesmente mais rápido que qualquer outro interpretador de Ruby, com exceção do Ruby 1.9.1. Veja o artigo "The Great Ruby Shootout" (http://antoniocangiano.com/2008/12/09/the-great-ruby-shootout-december-2008/) para saber mais. Usando o JRuby você pode ter um grande ganho de performance sem quebrar o código ou as dependências/gems (não é necessário usar a nova sintaxe do Ruby 1.9.1).

Em quarto lugar, o JRuby permite o uso de Java no código Ruby. O código Java pode ser chamado de dentro do código Ruby. Isso permite transferir objetos entre aplicações Java e Ruby/Rails sem serialização. Dependendo da situação ou se você precisa interagir com um sistema Java que já existe, isso pode ser muito útil. Além disso, o JRuby até mapeia boa parte da sintaxe do Java para imitar a sintaxe do Ruby.

Essas são apenas algumas das razões para se usar JRuby. Elas não foram abordadas por completo, mas o suficiente para despertar interesse pelo JRuby.
 
Atenção

Um dos problemas do JRuby é que ele não é compatível com gems que tem extensões nativas. (ex.: o driver do sqlite3, hpricot, ...). O JRuby não poderá executar extensões nativas a não ser que elas sejam chamadas através da interface FFI (Foreign Function Invocation), pois o ele é executado dentro da Java Virtual Machine. A partir da versão 1.1.5, o JRuby implementa a interface FFI. FFI é método usado pelo Ruby-FFI e pelo Rubinius para executar código nativo. Qualquer gem que chame o código nativo usando a interface FFI pode ser usado no JRuby (veja http://blog.headius.com/2008/10/ffi-for-ruby-now-available.html para mais detalhes). Alguns desenvolvedores de gems mantêm duas versões de cada gem, uma compatível com JRuby e outra com o Ruby MRI. Se a gem não usa o FFI e o autor não disponibilizou uma versão compatível com JRuby, então você terá que encontrar uma alternativa 100% em Ruby ou então usar alguma biblioteca em Java para substituir a gem. Código e bibliotecas Java podem ser chamadas a partir de código Ruby se ele for executado no JRuby.

Se você não tem escolha e precisa usar código com extensões nativas (que não seja compatível com JRuby) e você não achou nenhuma biblioteca java equivalente, então é melhor continuar usando o Ruby MRI.

 Você também deve estar ciente de que automatizar o processo de implantação talvez exija que você escreva suas próprias "receitas" do Capistrano. Como o Capistrano é focado na implantação para aplicações Rails no Mongrel ou Passenger, você precisará de "receitas especializadas" para implantar aplicações JRuby on Rails. Entretanto, essas alterações devem ser pequenas e causarão poucos problemas a você.

 Fora esses duas limitações eu acho JRuby fácil e eu pessoalmente o uso diariamente no lugar do Ruby MRI.

 Um pouco de história

 O JRuby começou em 2001 por Jan Ame Petersen. Depois de dois anos o projeto foi assumido por Thomas Enebo. Sob sua direção, o JRuby foi alterado de uma base Ruby 1.6 para uma Ruby 1.8. Um pouco mais tarde, Charles Nutter se juntou ao projeto, e ajudou significantemente a trazer o JRuby ao ponto atual. Além dessas pessoas, o projeto JRuby tem diversos membros da comunidade trabalhando, e sua comunidade está crescendo constantemente. Na versão atual, esta mesma comunidade finalizou a compatibilidade com Ruby 1.8 e está trabalhando duro para melhorar a performance do JRuby e fazê-lo compatível com Ruby 1.9.1. JRuby é o primeiro interpretador excetuando o Ruby MRI, que está sendo trabalhando para dar suporte à sintaxe Ruby 1.9.1

 Instalação

 O único requisito para instalar o JRuby é ter o java instalado (vide java.sun.com para instruções de como instalar o java no seu computador.) O JRuby precisa do JDK 5 ou 6 (talvez o 1.4 seja compatível). O JRuby já é rápido, mas Eu utilizo o JDK 6 que permite com que ele execute mais rápido ainda. O JRuby também está disponível para instalação automática a partir dos repositórios MacPorts, Emerge e apt-get. Se o seu SO usa um destes três sistemas de gerenciamento de pacotes simplesmente execute os seguintes comandos:

 MacPorts

 sudo port install jruby

 Emerge

 sudo emerge jruby

 apt-get

 sudo apt-get install jruby

 (cuidado: esta é uma versão muito velha do JRuby! Eu não recomendo o seu uso)

 Eu não tenho experiência no uso de MacPorts ou Emerge então eu não sei se eles disponibilizam versões atualizadas do JRuby.

 Se o seu SO não oferece suporte a algum desses gerenciadores de pacotes não se desespere. É muito simples instalar o JRuby a partir de um arquivo .zip/.tar.gz. Esta instalação manual pode ser feita em qualquer plataforma suportada (*Nix (incluindo OSX), e Windows) apenas seguindo estes 3 simples passos.

 1. Faça o Download do JRuby de http://dist.codehaus.org/jruby/1.1.6/. A versão estável atualmente é a 1.1.6, mas isto talvez tenha mudado no instante que este artigo tiver sido impresso. Certifique-se de obter a última versão estável. Pegue o arquivo jruby-bin-1.1.6.zip ou .tar.gz. A não ser que você queira revisar pessoalmente o código fonte não há necessidade de baixar o pacote completo ou de fontes (jruby-complete-1.1.6 ou jruby-src-1.1.6)

 2. Descompacte no diretório desejado

 3. Adicione o diretório bin do JRuby no PATH do sistema. Por exemplo, se o JRuby estiver instalado em c:\Arquivos de Programas\jruby, então adicione c:\Arquivos de Programas\jruby\bin ao PATH de sistema do seu Windows. Verifique a documentação do seu SO em como adicionar o diretório bin ao PATH do sistema.

 É isso. O JRuby deve estar instalado e funcionando em seu sistema. Ele pode ser testado simplesmente abrindo um console e executando o comando "jruby --version. O JRuby deve exibir algo parecido com isto:

 jruby 1.1.6 (ruby 1.8.6 patchlevel 114) (2008-12-17 rev 8388) [i386-java]

 Se acontecer algum problema com o processo de instalação ou se o JRuby não funcionar como esperado dê uma olhada no wiki de instalação (http://wiki.jruby.org/wiki/Getting_Started).

 Sujando as mãos



 Agora, o JRuby está instalado e funcionando. Mas, como usá-lo? Em praticamente todos os casos é exatamente a mesma coisa do que usar o Ruby MRI. Seu código deve rodar sem absolutamente nenhuma alteração. Para executar um script ruby simplesmente digite jruby nome_do_script no prompt de comando e pronto. Você executou sua primeira aplicação JRuby (veja o exemplo).

 Exemplo de Script:
 helloworld.rb
     puts "hello world do JRuby"
     #fim do arquivo

     jruby helloworld.rb

     Saída:

     hello world do JRuby

     Que tal comandos do ruby como gem, rake e rails? Executar a versão JRuby destes comandos é simples, basta apenas prefixar o comando com jruby -S (ex. jruby -S gem install rails, jruby -S rake db:migrate, etc.). Além do jruby -S no início, todos os comandos são idênticos a suas contra-partes no Ruby MRI.

     * RubyGems (versão 1.3.0), Rake e Rspec já vem empacotados com o JRuby e são automaticamente instalados juntamente com ele.






     JRuby on Rails
      
       
       Chegou a parte pela qual você esperava! JRuby on Rails. Funciona? A resposta é: Sim, funciona muito bem! Você não precisa se preocupar quando tiver que executar uma aplicação Rails no interpretador JRuby. A única alteração a ser feita na sua aplicação Rails é o arquivo database.yml. É necessário mudar o arquivo de configuração do banco de dados porque os drivers de banco do Active Record não são compatíveis com JRuby, já que muitos deles contêm código nativo. Em vez do driver padrão do ActiveRecord, o JRuby usa alguns itens do ActiveRecord sendo implementados com o JDBC do Java. (Muito obrigado ao Nick Sieger e todos aqueles que têm trabalhado com esses drivers). Todas as bibliotecas Java necessárias são instaladas com as gems do ActiveRecord-JDBC, então não é preciso mexer com nenhum código Java. Mudar para os drivers ActiveRecord-JDBC, consiste em dois passos:
        
        Primeiro, instale o driver apropriado para o seu banco de dados.
        ActiveRecord-JDBC drivers
        MySQL
        gem - activerecord-jdbcmysql-adapter
        PostgreSQL
        gem - activerecord-jdbcpostgresql-adapter
        Oracle
        gem - activerecord-jdbc-adapter
        Microsoft SQL Server (missing change_column_default)
        gem - activerecord-jdbc-adapter
        DB2 (limited migration support)
        gem - activerecord-jdbc-adapter
        FireBird (missing change_column_default and rename_column)
        gem - activerecord-jdbc-adapter
        Derby (limited migration support)
        gem - activerecord-jdbcderby-adapter
        HSQLDB
        gem - activerecord-jdbchsqldb-adapter
        H2
        gem - activerecord-jdbch2-adapter
        SQLite3 (work in progress)
        gem - activerecord-jdbcsqlite3-adapter
        Informix (fairly complete)
        gem - activerecord-jdbc-adapter


        Uma vez que o driver correto foi instalado, o segundo passo será modificar o arquivo database.yml. Se vocÊ está usando um banco de dados que tem um driver específico (não o genérico activerrecord-jdbc-adapter) então tudo o que você precisará fazer é prefixar a configuração “adapter:" com “jdbc” (veja o exemplo) Veja como isso é rápido e fácil.
         
         development:
         adapter: jdbcmysql
         encoding: utf8
         database: notes_development
         username: root
         password:
          
          Se o banco de dados atual não tem um driver específico (está usando o activerecord-jdbc-adapter), será preciso adicionar a URL e o Driver nas informações de conexão. A URL e o Driver são específicos de cada banco, então consulte a documentação para o driver JDBC que você estiver usando. Aqui está um exemplo de como o seu arquivo database.yml irá ficar: 

          development:
          adapter: jdbc
          username: blog
          password:
          driver: com.mysql.jdbc.Driver
          url: jdbc:mysql://localhost:3306/weblog_development
           
           Uma vez que o driver do banco de dados tiver sido alterado, todo o fluxo usual de desenvolvimento, execução e testes voltará ao normal, mas lembre-se de toda vez que você for executar um dos scripts dentro da pasta ./script/, deve prefixá-lo com jruby. Inicie o servidor WEBrick com jruby ./script/server e comece!

           Se você não quiser usar o WEBrick, a alternativa mais rápida é instalar a gem glassfish (jruby -S gem install glassfish). Assim que a gem glassfish estiver instalada, simplesmente vá até o diretório da sua aplicação rails e execute jruby -S glassfish. A gem não é apenas fácil o suficiente para se executar em ambiente de desenvolvimento, mas também pode ser usada como um servidor de produção bem estável. Eu escreverei mais sobre esse tópico, opções de implantação com JRuby, em um artigo futuro.
           Todas as gems de ActiveRecord-RDBC estão no github, então você precisará adicionar http://gems.github.com na configuração de origems do comando gem, ou adicionar esta opção ao comando gem

             jruby -S gem --source http://gems.github.com install gem_name

              Finalizando Wrap up 


              Neste momento, (ao menos é o que eu espero), você já é capaz de instalar e usar o JRuby para desenvolvimento Ruby/Rails. Para mais informações sobre o JRuby, verifique o site do JRuby em: www.jruby.org. O wiki (hospedado no site do JRuby) e a comunidade fornecem ótimos recursos para aqueles que estão precisando de ajuda ou estão procurando mais informações sobre o JRuby. Continuem lendo a Rails Magazine e o próximos artigos de JRuby nesta coluna.

              Fontes para pesquisa:


              ActiveRecord-JDBC home page – http://github.com/nicksieger/activerecord-jdbc-adapter/tree/master
              JRuby home page – http://www.jruby.org 
              IRC – #jruby on irc.freenode.net
              
              Discuss: http://railsmagazine.com/1/9










