Cobrança de assinaturas com Saasy
por Alex MacCaw

Nos últimos tempos o Software as a Service (SaaS, ou
software como serviço) se firmou como um modelo de negócios
muito atrativo, mesmo no atual cenário de insegurança
financeira. No entando, soluções de cobrança de assinaturas
(mensais, semestrais, etc.) podem ser compĺicadas (ou mesmo
chatas) de se implementar neste modelo - vários imprevistos
podem aparecer. O objetivo deste artigo é te ajudar a
evitar esses problemas, e quem sabe até adiantar o projeto.

Para receber pagamentos de cartões de crédito você irá
precisar de:
- Uma conta bancária de empresa
- Uma conta de mercante # TODO: substituir "mercante" por uma palavra mais amigável
- Uma conta gateway # TODO: verificar tradução

Sua conta de mercante é uma conta bancária comum, mas não é
possível acessá-la diretamente. Através de acordos, os bancos # TODO: acordos?
irão realizar as transações com cartões de crédito nela.
O seu gateway transmite os dados dos cartões de crédito dos
seus clientes para a conta de mercante e, em alguns casos,
armazenam esses dados para que você possa fazer novas
cobranças posteriormente.

Você não deve armazenar esses dados nos seus próprios servidores.
Se o fizer, deverá seguir rigorosas regras (PCI) ou estará # TODO: PCI compliant?
sujeito a ser multado. É mais fácil deixar o gateway cuidar
disso.

Existem bibliotecas prontas em Ruby, como a ActiveMerchant,
que abstraem a comunicação com os principais gateways,
fornecendo uma interface comum para eles.

Mesmo assim, implementar soluções de cobrança de assinaturas
é difícil. Alguns gateways tem mecanismos de cobrança de
assinaturas prontos - mas algumas coisas, como ser notificado
quando uma cobrança falhou, podem ser bem complicadas de se
conseguir. Uma boa alternativa é rodar diariamente um script
que verifica, de assinatura em assinatura, se já está na
hora de fazer uma nova cobrança, e a faz se for o caso.
Dessa forma, você tem controle total sobre quem e quando você
cobra. Além disso, fica muito mais fácil de implementar
algumas coisas mais complexas depois, como devoluções e
códigos de desconto.

E é aí que entra o Saasy. O Saasy é um aplicativo opensource
feito em Rails que administra criação de contas,
autenticação de usuários e cobrança de assinaturas. Além
disso, o Saasy também cuida do envio de e-mails, gera
extratos e trata cobranças que falharam. # TODO: invoices

Internamente o Saasy usa o ActiveMerchant (com alguns ajustes),
e atualmente suporta os seguintes gateways:
- Braintree (http://www.braintreepaymentsolutions.com/)
- TrustCommerce (http://www.trustcommerce.com/)
- PaymentExpress (http://www.paymentexpress.com/)

Ele foi feito para ser um componente independente do seu
serviço SaaS (mas compartilhando a base de dados). Esse tipo
de arquitetura está se tornando popular: o aplicativo é um
conjunto de componentes desacoplados, que podem ser
reutilizados e desenvolvidos sem se tornar um monte de código
bagunçado.

O Saasy também funciona como um Single Sign On (SSO), que será
necessário para autenticar os usuários. A vantagem disso é que
você não precisará escrever (ou gerar) mais código de
autenticação - e seus usuários podem permanecer logados em
todos os seus serviços, até mesmo se estiverem em domínios
diferentes.

---------------------
Alex MacCaw é um Desenvolvedor de Protótipos na # TODO: desenvolvedor de protótipos!?
Made by Many (http://madebymany.co.uk), empresa de londres
especializada em mídia social. Trabalha principalmente com
desenvolvimento em Ruby, mas meche com diversas outras
linguagens e áreas abrangendo design e implementação de # TODO: áreas?
aplicativos. Seu website pessoal é o http://eribium.org.
---------------------

-Instalação-

Estou considerando que você já tem o Ruby instalado no seu
sistema, mas se não tiver existem vários artigos pela internet
que mostram como instalá-lo.

Primeiro, abra um terminal e baixe o Saasy. Se você usa o Git,
execute:

git clone git://github.com/maccman/saasy.git

Se você não usa o Git, baixe o pacote no GitHub
(http://github.com/maccman/saasy).

O Rails e todas as outras gems de que o Saasy depende estão
vendorizadas, então você não precisa se procupar em instalar # TODO: vendorizadas?
elas.

A seguir, copie os arquivos de configuração padrões para
o lugar correto, assim:
cp config/database.example.yml config/database.yml
cp config/application.example.yml config/application.yml
cp config/subscription.example.yml config/subscription.yml

As configurações padrões são o suficiente para começarmos,
depois nós iremos ajustá-las.

O próximo passo é criar o banco de dados Sqlite. Execute:
rake db:schema:load

Agora podemos iniciar o servidor:
script/server

Agora já estamos com tudo configurado; navegue até
http://localhost:3000/signup

Preencha o formulário de cadastro, e use os seguintes dados
de testes nos campos de cartão de crédito:
- Type: Visa
- Number: 4111111111111111
- CVS: 999

So, if the signup validation passed, you’ll be sent to the login
screen with a prompt to check your inbox. However, since this is
running in the Rails development environment, that email will
never be sent - so you’ll have to check the logs which will contain
the raw email, and navigate to the activation url manually.

Once your account has been activated, and you’ve signed
in, you’ll be looking at your profile management page. Have an
explore of the various view, especially the billing one.
You’ll notice Saasy comes with a default black theme - you’ll have
to customize this to fit in with your own sites design. Likewise
with the signup, and plan page.

By default Saasy uses a gateway called Braintree as they allow
sandbox developing without registering an account with them.
You can change the gateway in config/subscription.yml. That’s
also the configuration file where you specify the plans you want,
their duration and price amonst other things. If you have a look
at the defaults everything should be fairly self explanatory.

The other configuration file, config/application.yml, specifies
more application specific settings such as the application name,
domain and mailing address.

-Integrating Saasy with your SaaS service-

One of the other beneifts Saasy provides you with is a SSO
(Single Sign On), so you don’t need to repeat authentication code
in all your apps, and you can stay ‘DRY’. At the moment, Saasy
uses a custom SSO protocol, since I was keen to keep it as simple
as possible, with only one round request. This may change to a
widely recognised SSO protocol if there are lots of calls for it.

I’m assuming that the app you’re integrating with Saasy is
also a Rails site, if not you’ll have to look closer at the protocol
to replicate it. Also, the SSO library I wrote also assumes you’ve
installed the RestfulAuthentication plugin, which you can get it
off github (http://github.com/technoweenie/restful-authentication/
tree).

Copy lib/sso.rb from Saasy to your other app. In app/control-
lers/application.rb, you’ll need to add this configuration:
include SSO::Client
sso({
  :secret => ‘sso_secret’,
  :salt => ‘sso_salt’,
  :login_url => saas_site + ‘/login’,
  :logout_url => saas_site + ‘/logout’,
  :callback_url => app_site + ‘/sessions/sso’
})

Obviously you’ll need to replace those values with the real
ones. The secret and salt should be different, random num-
bers – you can generate them with a rake task called secret. The
login_url will need to point to the login url of Saasy, likewise the
logout_url needs to be set to Saasy’s logout action. The callback_
url needs to point to an SSO action (which we haven’t made yet),
on this application.

You’ll need to edit Saasy’s config/application.yml file, so the
sso_secret and sso_salt match the ones you added to the control-
ler. These are the shared secrets used to generate checksums for
the SSO, and so need to be the same.

Create a basic Sessions controller containing the following
code:
class SessionsController < ApplicationController
  def new
    redirect_to sso_login_url
  end
  def destroy
    logout_killing_session!
    redirect_to sso_logout_url
  end
  def sso
    head(401) and return unless sso_valid_token?
    flash[:notice] = “Logged in successfully”
    redirect_back_or_default(‘/’)
  end
end

Those SSO specific methods are provided by including
Saasy::Client, which we did in application.rb. As you can see,
there is significantly less code there than you’d normally need
for authentication (not to mention the User model). There’s still a
problem with the code though:

Once we’ve authorized the client in the method sso, we still
don’t know which one it is, so we need to do an additional re-
quest too Saasy. We’re going to use ActiveResource to do that:
class RemoteUser < ActiveResource::Base
  class_inheritable_accessor :headers
  self.site = ‘saas_site’
  self.element_name = ‘user’
  class << self
    def current_user
      find(:one, :from => :current)
    end
  end
end

The above is what you’ll need to include in app/models/remote_
user.rb. The reason I’m using the class name RemoteUser, rather
than User, is to prevent clobbering of an existing User model (if it
exists).

Now we can call just User.current_user in the controller, and
it’ll fetch the current user from Saasy.

Make the SessionsController#sso method look like this:
def sso
  head(401) and return unless sso_valid_token?
  RemoteUser.headers =
    {‘Authorization’ => sso_header_token}
  remote_user = RemoteUser.current_user
  self.current_user = User.find(remote_user.id)
  flash[:notice] = “Logged in successfully”
  redirect_back_or_default(‘/’)
end

You can see we’re setting the headers on RemoteUser, so Saasy
knows which user we’re talking about. We’re then setting cur-
rent_user, which is an RestfulAuthentication method, so that us-
ers id stays in the session, and doesn’t need authentication every
time they make a request.

If you just want an overview of the complete code, there’s
some documentation in lib/sso.rb – and code examples too.

And now, I’m afraid, a disclaimer: Saasy is only a few weeks
old, still alpha and hasn’t yet been used in a production environ-
ment. That said, things are progressing quickly, and I’m planning
on using Saasy in my own commercial site, socialmod.com – an
automated moderation service which is currently in a private
beta. Hopefully, with the support of the open source community,
we’ll have a production ready framework soon.

If you’re looking for a more robust and tested solution, try
the Rails Kits SaaS app (http://railskits.com/saas/) which has
been around for quite a while.

So, that’s a brief introduction to Saasy, I hope it saved you
a bit of time reinventing the wheel by writing your own billing
framework.

-Resources-
http://www.slash7.com/jumpstart
http://letsfreckle.com/blog/2008/12/ecommerce-stuff/
http://www.activemerchant.org/
http://railskits.com/saas/
http://particletree.com/notebook/processing-online-credit-card-transactions/
http://www.37signals.com/svn/posts/753-ask-37signals-how-do-you-process-credit-cards
http://activereload.net/2007/5/17/dealing-with-subscription-payments
http://www.setfiremedia.com/blog/7-top-tips-for-coding-with-currency

Discuss: http://railsmagazine.com/1/4
