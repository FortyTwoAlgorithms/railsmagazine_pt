Cobrança de assinaturas com Saasy
por Alex MacCaw

Nos últimos tempos, o Software como Serviço (SaaS - "Software as a Service") 
se firmou como um modelo de negócios muito atrativo, mesmo no atual 
cenário de insegurança financeira. No entanto, soluções de cobrança 
de assinaturas (mensais, semestrais, etc.) podem ser compĺicadas 
(ou mesmo chatas) de se implementar neste modelo, pois vários imprevistos
podem aparecer no caminho. O objetivo deste artigo é te ajudar a
evitar esses problemas, e quem sabe até adiantar o projeto.

Para receber pagamentos de cartões de crédito você irá
precisar de:

- Uma conta bancária corporativa
- Uma conta mercante
- Uma conta em um gateway de pagamentos

A conta mercante é na verdade uma conta bancária comum, mas não 
uma que você consiga acessar diretamente. Elas são parte de 
acordos com os principais bancos para realização de transações 
com cartões de crédito nelas. O seu gateway transmite os dados 
dos cartões de crédito dos seus clientes para a conta 
mercante e, em alguns casos, armazenam esses dados para que você 
possa fazer novas cobranças posteriormente.

Você não deve armazenar esses dados nos seus servidores.
Se o fizer, deverá seguir as rigorosas regras PCI (Payment Card
Industry Data Security Standard) ou estará sujeito a ser multado.
É mais fácil deixar o gateway cuidar disso.

Existem bibliotecas prontas em Ruby, como a ActiveMerchant,
que abstraem a comunicação com os principais gateways,
fornecendo uma interface comum para eles.

Mesmo assim, implementar soluções de cobrança de assinaturas
ainda é "doloroso". Alguns gateways tem mecanismos de cobrança de
assinaturas próprios - mas algumas coisas, como ser notificado
quando uma cobrança falhou, podem ser bem complicadas de se
conseguir. Uma boa alternativa é rodar diariamente um script
que verifica, de assinatura em assinatura, se já está na
hora de fazer uma nova cobrança, e executa a mesma se for o caso.
Dessa forma, você tem controle total sobre quem e quando você
cobra. Além disso, fica muito mais fácil de implementar
algumas coisas mais complexas depois, como devoluções e
códigos de desconto.

E é aí que entra o Saasy. O Saasy é um aplicativo Open Source
feito em Rails que administra criação de contas,
autenticação de usuários e cobrança de assinaturas. Além
disso, o Saasy também cuida do envio de e-mails, geração de 
extratos e tratamento de cobranças que falharam.

Internamente o Saasy usa o ActiveMerchant (com alguns ajustes),
e atualmente suporta os seguintes gateways:
- Braintree (http://www.braintreepaymentsolutions.com/)
- TrustCommerce (http://www.trustcommerce.com/)
- PaymentExpress (http://www.paymentexpress.com/)

Ele foi feito para ser um componente independente e que roda 
separado do seu serviço SaaS (mas compartilhando a mesma base de dados). 
Esse tipo de arquitetura está se tornando popular: o aplicativo é um
conjunto de componentes ágeis e desacoplados, que podem ser
reutilizados e desenvolvidos sem se tornar um monte de código
bagunçado.

O Saasy também funciona como um Single Sign On (SSO), que será
necessário para autenticar os usuários. A vantagem disso é que
você não precisará escrever (ou gerar) mais código de
autenticação - e seus usuários podem permanecer logados em
todos os seus serviços, até mesmo se estiverem em domínios
diferentes.

---------------------
Alex MacCaw é um Desenvolvedor de Protótipos na 
Made by Many (http://madebymany.co.uk), empresa de Londres
especializada em mídia social. Trabalha principalmente com
desenvolvimento em Ruby, mas tem contato com diversas outras
linguagens e áreas abrangendo design e implementação de
aplicativos. Seu website pessoal é o http://eribium.org.
---------------------

-Instalação-

Estou considerando que você já tem o Ruby instalado na sua
máquina, mas se não tiver existem vários artigos pela internet
que mostram como instalá-lo.

Primeiramente, você precisará abrir um terminal e baixar o Saasy. 
Se você está usando o Git, execute:

git clone git://github.com/maccman/saasy.git

Se você não usa o Git, poderá baixar o pacote no github
(http://github.com/maccman/saasy).

O Rails e todas as outras gems de que o Saasy depende estão
incluídos dentro do projeto, então você não precisa se
preocupar em instalá-las.

A seguir, copie os arquivos de configuração padrões para
o lugar correto, assim:

cp config/database.example.yml config/database.yml
cp config/application.example.yml config/application.yml
cp config/subscription.example.yml config/subscription.yml

As configurações padrões serão o suficiente para começarmos,
depois nós poderemos ajustá-las.

O próximo passo é criar o banco de dados Sqlite. Execute:

rake db:schema:load

Agora nós estamos prontos para iniciar o servidor:

script/server

Agora tudo já está configurado; navegue até:

http://localhost:3000/signup

Preencha o formulário de cadastro, e use os seguintes dados
de testes nos campos de cartão de crédito:

- Type: Visa
- Number: 4111111111111111
- CVS: 999

Se o cadastro for bem sucedido, você será redirecionado
para a tela de login com uma solicitação para verificar seu email.
Como estamos rodando o Saasy em ambiente de desenvolvimento,
o e-mail nunca vai chegar - então você terá que encontrar o link
de ativação manualmente nos logs de envio de e-mail.

Uma vez que seu cadastro tenha sido ativado e você feito login, você será
levado para a página de configuração do seu perfil. Explore as
várias sessões do Saasy, dando uma atenção especial para a de
cobrança (Billing).
O tema padrão do Saasy é preto - você terá que customizar o
layout para que ele fique de acordo com a identidade visual ("cara")
dos seus sites, incluindo as telas de cadastro e de planos.

Por padrão o Saasy usa um gateway chamado Braintree, pois ele
tem um ambiente para desenvolvimento separado (sandbox) que pode 
ser usado sem se cadastrar. Você pode trocar o gateway no arquivo
config/subscription.yml. É nesse arquivo também que você deve
configurar os planos e suas características, como duração,
preço, etc. Você pode basear suas configurações nas de exemplo
- elas são bem fáceis de entender.

O outro arquivo de configuração, config/application.yml, guarda
configurações mais específicas da aplicação, como o nome, domínio
e endereço e-mail.

-Integrando o Saasy com o seu serviço SaaS-

O Saasy tem outro um benefício: Single Sign On (SSO). Isso
significa que você não precisa repetir a autenticação em
todas as suas aplicações. Atualmente o Saasy usa um protocolo
próprio de SSO, pois dessa forma ficou bem mais simples de
implementar. Se muitos usuários pedirem, esse protocolo poderá
ser substituído por outro mais maduro.

Estou assumindo que a aplicação a qual você está integrando
o Saasy também é um site em Rails. Se não for, você terá que
reimplementar o protocolo. Além disso, a biblioteca de SSO
precisa do plugin RestfulAuthentication, que você pode baixar
no github (http://github.com/technoweenie/restful-authentication/
tree).

Copie o arquivo lib/sso.rb do Saasy para sua outra aplicação.
Adicione a seguinte configuração no seu
app/controllers/application.rb:

include SSO::Client
sso({
  :secret => ‘sso_secret’,
  :salt => ‘sso_salt’,
  :login_url => saas_site + ‘/login’,
  :logout_url => saas_site + ‘/logout’,
  :callback_url => app_site + ‘/sessions/sso’
})

Obviamente você precisará substituir esses dados com os seus (valores reais).
O :secret e o :salt devem ser valoores diferentes, aleatórios - você pode
gerar eles com uma tarefa (task) chamada 'secret' no rake. O :login_url deve
apontar para a url de login do Saasy, assim como o :logout_url
deve apontar para a de logout. O :callback_url deve apontar para
uma action de SSO (que vamos criar mais adiante) nesta aplicação.

Você precisará atualizar o config/application.yml com o
:sso_secret e o :sso_salt que você configurou no controller.
Essas senhas são compartilhadas para gerar checksums para o SSO,
então precisam estar iguais nos dois lugares.

Crie uma controller simples chamada SessionsController com o seguinte
código:

class SessionsController < ApplicationController
  def new
    redirect_to sso_login_url
  end
  def destroy
    logout_killing_session!
    redirect_to sso_logout_url
  end
  def sso
    head(401) and return unless sso_valid_token?
    flash[:notice] = “Logged in successfully”
    redirect_back_or_default(‘/’)
  end
end

Esses métodos específicos de SSO são fornecidos, incluindo a classe
Saasy::Client, que adicionamos no application.rb. Como você
pode ver, tem muito menos código do que normalmente se escreve
para autenticação de usuários (sem contar a própria model User).
Mas ainda falta uma coisa:

Quando autenticamos um usuário no método sso, nós ainda não
temos como saber que usuário está logado, então precisamos
fazer uma solicitação adicional para o Saasy. Vamos usar o 
ActiveResource para isso:

class RemoteUser < ActiveResource::Base
  class_inheritable_accessor :headers
  self.site = ‘saas_site’
  self.element_name = ‘user’
  class << self
    def current_user
      find(:one, :from => :current)
    end
  end
end

Adicione este código no model app/models/remote_user.rb. Eu
usei o nome RemoteUser, ao invés de User, para que ela não aconteça conflito
caso já exista uma classe chamada User.

Agora podemos recuperar o usuário que está logado apenas chamando
o método User.remote_user na controller.

Modifique o método SessionsController#sso para:

def sso
  head(401) and return unless sso_valid_token?
  RemoteUser.headers =
    {‘Authorization’ => sso_header_token}
  remote_user = RemoteUser.current_user
  self.current_user = User.find(remote_user.id)
  flash[:notice] = “Logged in successfully”
  redirect_back_or_default(‘/’)
end

Como você pode ver, estamos definindo o cabeçalho na model
RemoteUser para que o Saasy saiba de qual usuário estamos tratando.
Depois nós chamamos o self.current_user, que é um método do
RestfulAuthentication, para que o id do usuário fique gravado na sessão
e possamos recuperá-lo a cada requisição.

Se você quiser apenas dar uma olhada no código completo, procure o
arquivo lib/sso.rb - lá tem documentação e exemplos de código.

Agora, um aviso: o Saasy tem apenas algumas semanas de vida, está em
fase alpha e ainda não foi usado em ambiente de produção. Apesar
disso, ele está evoluindo rapidamente, e eu pretendo usá-lo no meu
site comercial, socialmod.com - um serviço de moderação automática
que por enquanto está em beta fechado. Acredito que, com a ajuda
da comunidade open source, teremos uma versão estável em breve.

Se você está procurando uma solução mais robusta, testada e madura, dê uma
olhada no aplicativo SaaS do Rails Kits (http://railskits.com/saas/).
Ele já tem um bom tempo de casa.

Essa foi uma breve introdução ao Saasy. Espero ter te ajudado a
economizar tempo e a não reinventar a roda implementando a
cobrança do zero.

-Referências-
http://www.slash7.com/jumpstart
http://letsfreckle.com/blog/2008/12/ecommerce-stuff/
http://www.activemerchant.org/
http://railskits.com/saas/
http://particletree.com/notebook/processing-online-credit-card-transactions/
http://www.37signals.com/svn/posts/753-ask-37signals-how-do-you-process-credit-cards
http://activereload.net/2007/5/17/dealing-with-subscription-payments
http://www.setfiremedia.com/blog/7-top-tips-for-coding-with-currency

Tópico no fórum: http://railsmagazine.com/1/4
