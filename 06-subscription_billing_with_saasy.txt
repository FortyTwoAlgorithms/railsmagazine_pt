Cobrança de assinaturas com Saasy
por Alex MacCaw

Nos últimos tempos o Software as a Service (SaaS, ou
software como serviço) se firmou como um modelo de negócios
muito atrativo, mesmo no atual cenário de insegurança
financeira. No entando, soluções de cobrança de assinaturas
(mensais, semestrais, etc.) podem ser compĺicadas (ou mesmo
chatas) de se implementar neste modelo - vários imprevistos
podem aparecer. O objetivo deste artigo é te ajudar a
evitar esses problemas, e quem sabe até adiantar o projeto.

Para receber pagamentos de cartões de crédito você irá
precisar de:
- Uma conta bancária de empresa
- Uma conta de mercante # TODO: substituir "mercante" por uma palavra mais amigável
- Uma conta em um gateway de pagamentos

Sua conta de mercante é uma conta bancária comum, mas não é
possível acessá-la diretamente. Através de acordos, os bancos # TODO: acordos?
irão realizar as transações com cartões de crédito nela.
O seu gateway transmite os dados dos cartões de crédito dos
seus clientes para a conta de mercante e, em alguns casos,
armazenam esses dados para que você possa fazer novas
cobranças posteriormente.

Você não deve armazenar esses dados nos seus próprios servidores.
Se o fizer, deverá seguir rigorosas regras (PCI) ou estará # TODO: PCI compliant?
sujeito a ser multado. É mais fácil deixar o gateway cuidar
disso.

Existem bibliotecas prontas em Ruby, como a ActiveMerchant,
que abstraem a comunicação com os principais gateways,
fornecendo uma interface comum para eles.

Mesmo assim, implementar soluções de cobrança de assinaturas
é difícil. Alguns gateways tem mecanismos de cobrança de
assinaturas prontos - mas algumas coisas, como ser notificado
quando uma cobrança falhou, podem ser bem complicadas de se
conseguir. Uma boa alternativa é rodar diariamente um script
que verifica, de assinatura em assinatura, se já está na
hora de fazer uma nova cobrança, e a faz se for o caso.
Dessa forma, você tem controle total sobre quem e quando você
cobra. Além disso, fica muito mais fácil de implementar
algumas coisas mais complexas depois, como devoluções e
códigos de desconto.

E é aí que entra o Saasy. O Saasy é um aplicativo opensource
feito em Rails que administra criação de contas,
autenticação de usuários e cobrança de assinaturas. Além
disso, o Saasy também cuida do envio de e-mails, gera
extratos e trata cobranças que falharam. # TODO: invoices

Internamente o Saasy usa o ActiveMerchant (com alguns ajustes),
e atualmente suporta os seguintes gateways:
- Braintree (http://www.braintreepaymentsolutions.com/)
- TrustCommerce (http://www.trustcommerce.com/)
- PaymentExpress (http://www.paymentexpress.com/)

Ele foi feito para ser um componente independente do seu
serviço SaaS (mas compartilhando a base de dados). Esse tipo
de arquitetura está se tornando popular: o aplicativo é um
conjunto de componentes desacoplados, que podem ser
reutilizados e desenvolvidos sem se tornar um monte de código
bagunçado.

O Saasy também funciona como um Single Sign On (SSO), que será
necessário para autenticar os usuários. A vantagem disso é que
você não precisará escrever (ou gerar) mais código de
autenticação - e seus usuários podem permanecer logados em
todos os seus serviços, até mesmo se estiverem em domínios
diferentes.

---------------------
Alex MacCaw é um Desenvolvedor de Protótipos na # TODO: desenvolvedor de protótipos!?
Made by Many (http://madebymany.co.uk), empresa de londres
especializada em mídia social. Trabalha principalmente com
desenvolvimento em Ruby, mas meche com diversas outras
linguagens e áreas abrangendo design e implementação de # TODO: áreas?
aplicativos. Seu website pessoal é o http://eribium.org.
---------------------

-Instalação-

Estou considerando que você já tem o Ruby instalado no seu
sistema, mas se não tiver existem vários artigos pela internet
que mostram como instalá-lo.

Primeiro, abra um terminal e baixe o Saasy. Se você usa o Git,
execute:

git clone git://github.com/maccman/saasy.git

Se você não usa o Git, baixe o pacote no github
(http://github.com/maccman/saasy).

O Rails e todas as outras gems de que o Saasy depende estão
vendorizadas, então você não precisa se procupar em instalar # TODO: vendorizadas?
elas.

A seguir, copie os arquivos de configuração padrões para
o lugar correto, assim:
cp config/database.example.yml config/database.yml
cp config/application.example.yml config/application.yml
cp config/subscription.example.yml config/subscription.yml

As configurações padrões são o suficiente para começarmos,
depois nós iremos ajustá-las.

O próximo passo é criar o banco de dados Sqlite. Execute:
rake db:schema:load

Agora podemos iniciar o servidor:
script/server

Agora já estamos com tudo configurado; navegue até
http://localhost:3000/signup

Preencha o formulário de cadastro, e use os seguintes dados
de testes nos campos de cartão de crédito:
- Type: Visa
- Number: 4111111111111111
- CVS: 999

Agora, se o cadastro foi bem sucedido, você será redirecionado
para a tela de login com uma solicitação para verificar seu email.
Como estamos rodando o Saasy em ambiente de desenvolvimento,
o e-mail nunca vai chegar - então você terá que encontrar o link
de ativação manualmente nos logs de envio de e-mail.

Depois que seu cadastro for ativado e você fizer login, você será
levado para a página de configuração do seu perfil. Explore as
várias seções do Saasy, dando uma atenção especial para a de # TODO: seções?
cobrança (Billing).
O tema padrão do Saasy é preto - você terá que customizar o
layout para que ele fique de acordo com a identidade visual
dos seus sites, incluindo as telas de cadastro e de planos.

Por padrão o Saasy usa um gateway chamado Braintree, pois ele
tem uma sandbox de desenvolvimento que pode ser usada sem se
cadastrar. Você pode trocar o gateway no arquivo
config/subscription.yml. É nesse arquivo também que você deve
configurar os planos e suas características, como duração,
preço, etc. Você pode basear suas configurações nas de exemplo
- elas são bem fáceis de entender.

O outro arquivo de configuração, config/application.yml, guarda
configurações mais específicas do sistema, como o nome, domínio # TODO: sistema ou aplicação?
e endereço e-mail.

-Integrando o Saasy com o seu serviço SaaS-

O Saasy tem outro um benefício: Single Sign On (SSO). Isso
significa que você não precisa repetir a autenticação em
todas as suas aplicações. Atualmente o Saasy usa um protocolo
próprio de SSO, pois dessa forma ele ficou bem mais simples. # TODO: round request?
Se muitos usuários pedirem, esse protocolo poderá ser
substituído por outro mais maduro.

Estou assumindo que o aplicativo ao qual você está integrando
o Saasy também é feito em Rails. Se não for, você terá que
reimplementar o protocolo. Além disso, a biblioteca de SSO
precisa do plugin RestfulAuthentication, que você pode baixar
no github (http://github.com/technoweenie/restful-authentication/
tree).

Copie o arquivo lib/sso.rb do Saasy para sua outra aplicação.
Adicione a seguinte configuração no seu
app/controllers/application.rb:
include SSO::Client
sso({
  :secret => ‘sso_secret’,
  :salt => ‘sso_salt’,
  :login_url => saas_site + ‘/login’,
  :logout_url => saas_site + ‘/logout’,
  :callback_url => app_site + ‘/sessions/sso’
})

Obviamente você precisará substituir esses valores com os seus.
O :secret e o :salt devem ser diferentes, aleatórios - você pode
gerar eles com a tarefa 'secret' no rake. O :login_url deve
apontar para a url de login do Saasy, assim como o :logout_url
deve apontar para a de logout. O :callback_url deve apontar para
uma action de SSO (que vamos criar adiante) da aplicação.

Você precisará atualizar o config/application.yml com o
:sso_secret e o :sso_salt que você configurou no controller.
Essas senhas são compartilhadas para gerar checksums para o SSO,
então precisam estar iguais nos dois lugares.

Crie uma controller simples chamada Sessions com o seguinte
código:
class SessionsController < ApplicationController
  def new
    redirect_to sso_login_url
  end
  def destroy
    logout_killing_session!
    redirect_to sso_logout_url
  end
  def sso
    head(401) and return unless sso_valid_token?
    flash[:notice] = “Logged in successfully”
    redirect_back_or_default(‘/’)
  end
end

Those SSO specific methods are provided by including
Saasy::Client, which we did in application.rb. As you can see,
there is significantly less code there than you’d normally need
for authentication (not to mention the User model). There’s still a
problem with the code though:

Once we’ve authorized the client in the method sso, we still
don’t know which one it is, so we need to do an additional re-
quest too Saasy. We’re going to use ActiveResource to do that:
class RemoteUser < ActiveResource::Base
  class_inheritable_accessor :headers
  self.site = ‘saas_site’
  self.element_name = ‘user’
  class << self
    def current_user
      find(:one, :from => :current)
    end
  end
end

The above is what you’ll need to include in app/models/remote_
user.rb. The reason I’m using the class name RemoteUser, rather
than User, is to prevent clobbering of an existing User model (if it
exists).

Now we can call just User.current_user in the controller, and
it’ll fetch the current user from Saasy.

Make the SessionsController#sso method look like this:
def sso
  head(401) and return unless sso_valid_token?
  RemoteUser.headers =
    {‘Authorization’ => sso_header_token}
  remote_user = RemoteUser.current_user
  self.current_user = User.find(remote_user.id)
  flash[:notice] = “Logged in successfully”
  redirect_back_or_default(‘/’)
end

You can see we’re setting the headers on RemoteUser, so Saasy
knows which user we’re talking about. We’re then setting cur-
rent_user, which is an RestfulAuthentication method, so that us-
ers id stays in the session, and doesn’t need authentication every
time they make a request.

If you just want an overview of the complete code, there’s
some documentation in lib/sso.rb – and code examples too.

And now, I’m afraid, a disclaimer: Saasy is only a few weeks
old, still alpha and hasn’t yet been used in a production environ-
ment. That said, things are progressing quickly, and I’m planning
on using Saasy in my own commercial site, socialmod.com – an
automated moderation service which is currently in a private
beta. Hopefully, with the support of the open source community,
we’ll have a production ready framework soon.

If you’re looking for a more robust and tested solution, try
the Rails Kits SaaS app (http://railskits.com/saas/) which has
been around for quite a while.

So, that’s a brief introduction to Saasy, I hope it saved you
a bit of time reinventing the wheel by writing your own billing
framework.

-Resources-
http://www.slash7.com/jumpstart
http://letsfreckle.com/blog/2008/12/ecommerce-stuff/
http://www.activemerchant.org/
http://railskits.com/saas/
http://particletree.com/notebook/processing-online-credit-card-transactions/
http://www.37signals.com/svn/posts/753-ask-37signals-how-do-you-process-credit-cards
http://activereload.net/2007/5/17/dealing-with-subscription-payments
http://www.setfiremedia.com/blog/7-top-tips-for-coding-with-currency

Discuss: http://railsmagazine.com/1/4
