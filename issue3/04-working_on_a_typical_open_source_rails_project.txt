Trabalhando em um projeto Rails de código aberto
por Dmitry Amelchenko                    

                                                       
Há muito o que dizer a respeito do modelo de desenvolvimento open source(OS).
Um projeto open source tradicional em Rails tem características específicas
comparado ao resto dos projetos open source. Um projeto opensource
tradicional normalmente tem um build que você pode fazer o download e instalar -
um arquivo tar, jar, lib ou mesmo um exe, enquanto no Rails isso é um Web Site.    
A complexidade de um deploy de uma aplicação web é talvez uma das razões
para que o projetos de web aplication open source não estejam no mainstream ainda. 
Rails por outro lado oferece uma oportunidade aos desenvolvedores de aplicações web que
pode ser facilmente instalada em diversos ambientes ou quantos hosts desejar.
Alguém pode perguntar: quando estamos desenvolvendo uma aplicação web, nós não queremos
rodá-la em um único host? Uma das razões para desenvolvimento de aplicações web open source
seria o fato de que algumas indústrias ainda tem regras rígidas e não aceitariam compartilhar 
e enviar dados através de algum serviço web 2.0, mas se o código fonte para tal serviço
é disponibilizado gratuítamente e pode ser instalado dentro do firewall da empresa, 
todos estaríam felizes. Outra razão para as pessoas escolherem criar uma aplicação web 
open source é a disponibilidade de ferramentas avançadas que são distribuídas gratuitamente
caso seu código seja open source.  Nesse artigo vou falar sobre alguns desses serviços.
E por fim, mas não menos importante é a disponibilidade de talentos - 
se você está trabalhando em um projeto open source realmente interessante usufruindo dos poderes da Web,
a chance de você estar trabalhando junto com os melhores programadores é muito grande. 
Seja qual for a razão para fazer um projeto Rails open source, é possível
encontrar uma lista deles em duas fontes:
— http://wiki.rubyonrails.com/rails/pages/OpenSourceProjects 
e http://www.opensourcerails.com/. 
Para mim tudo começou lendo o livro  “Getting real” da 37Signals — 
ele está disponível gratuítamente em  https:// 
gettingreal.37signals.com/ ou http://gettingreal.37signals.com/GR_por.php. 
Pra resumir; a 37Signals 
é a melhor no que faz. Eles estão fora dos padrões da industria mundial, 
afinal de contas eles são os criadores do Rails. o livro fala principalmente sobre o senso comum
quando o assunto é desenvolvimento de software. Eu fiquei muito empolgado em descobrir mais sobre os 
produtos web 2.0 que a 37Signals oferece. Um dos projetos simples mas muito útil que eu quis começar
a usar foi o "Campfire" -  uma aplicação web de chat. Mas tão logo eu comecei a promover 
o Campfire na empresa, eu percebi que não iria funcionar prá nós. Eu trabalho para uma dessas
empresas que so extremamente preocupadas em perder informações sigilosas na web.
Mas eu estava perplexo e sentindo que a ferramenta de chat era exatamente o que minha 
empresa necessitava pra melhorar a colaboração entre todos. Então eu decidi começar minha 
própria aplicação web de chat. 
Primeiramente eu apenas queria escrever algo muito próximo ao "Campfire". Foi depois,
baseado no feedback dos usuários, que percebi que chat agregados de redes sociais 
eram muito mais úteis e poderosos. Minha intenção também era ter o maior número de 
desenvolvedores do meu escritório interessados. Então, tornar o projeto open source
não era um requerimento inicial. Mas pra facilitar minha vida e evitar questões da gerência,
como "pra que você precisa desse servidor...", "nós não temos o que você está procurando aqui...",
"nós não podemos aprovar um projeto não realionado a empresa nesses servidores...", "precisa ser
aprovado pelos diretores...", "se você está fazendo isso significa que você tem muito tempo livre...",
eu decidi não entrar na burocracia da empresa e tocar o projeto sozinho.
Eu iria falar com o pessoal técnico da empresa mais tarde, quando o projeto estivesse rodando.
Olhando pra trás, eu percebo que tornar o projeto open source foi uma das melhores
decisões da minha vida. O próximo passo é descobrir como rodar o projeto sem gastar muito 
dinheiro do meu bolso. Nós vivemos em tempos estranhos onde você consegue muita coisa de graça.
Não é mais do tipo "você tem o que você pagou" - de graça não significa ruim, normalmente é o contrário,
"grátis" significa o melhor. E é claro, não é o melhor porque é grátis, mas porque é open source.
Quanto a tecnologia, Ruby on Rails foi minha primeira escolha, grátis, elegante, suporte
de uma comunidade incrível - e há algo que preciso dizer mesmo com o risco de chover no molhado.
Como todo bom profissional, eu não poderia deixar de colocar o código em algum controlador de versão.
Existem milhares de opções. Git vem fazendo cada vez mais barulho. Existem diversos sites que oferecem 
hospedagem em repositórios git. Mas há algo que deve ser dito sobre o http://github.com.
Primeiro de tudo ele te oferece 100M para repositórios públicos de graça(o que significa muitos
projetos open source). Mas essa não é a parte mais importante. O que faz o github ser diferente 
dos outros é o aspecto de rede social. É essencial que seu projeto open source seja visualizado por outros.
O projeto que comecei esta hospedado em http://github.com/dmitryame/echowaves/ e no momento
que escrevo, ele tem 18 seguidores - não muito, mas mais do que eu poderia esperar em um projeto de 
um mês. E a parte legal é que você não está apenas limitado a desenvolver na sua empresa ou país.
É realmente globalizado. Um dos melhores contribuidores e líder técnico mora na Espanha - 
acredite ou não ele encontrou o projeto no github e gostou o suficiente pra participar.
Através do github eu fui apresentado a um programador da Inglaterra que também era inspirado 
pela 37signals e começou outros projetos muito bons - railscollab e rucksack, ele fez uma
série de sugestões muito boas que influenciaram muito no projeto.
Eu não consigo expressar inteiramente o quanto eu me empolguei em trabalhar num projeto
com pessoas diferentes que eu nunca havia conhecido pessoalmente antes, e que estavam ao redor do mundo.
Redes sociais tem sido usadas pra diversos fins, mas na minha experiência se existe um benefício nelas, é esse.
Tão bom quanto parece, isso tudo não vem de graça-, existem algumas coisas pra se ter em mente.
Aqui está o que precisei fazer pras coisas acontecerem.
Certifique-se de escrever um ótimo README no seu projeto. Ele aparecerá no home page do seu 
projeto no github e é muito comum as pessoas julgarem seu projeto baseado nas primeiras impressões
que tiveram pelo README. Portanto garanta que existe um bom sumário para rodar seu projeto
assim como detalhes de instalação. Na minha opnião, isso é tudo que deve aparcer no arquivo README.
Se você começar a colocar mais coisas nele e ele ficar grande, ele vai distrai a atenção e as pessoas
o abandonarão.
Próximo, garante uma instalação demo do seu projeto para que as pessoas possam testar antes de 
tomar a decisão de instalar o projeto em suas máquinas locais. De preferência isso deveria 
ter um servidor dedicado com o nome do seu peojeto no github. Minha referência de instalação 
por exemplo é o http://echowaves.com/. Aualmente ele é mais que uma referência de instalação.
Os desenvolvedores que trabalham na aplicação utilizam pra colaborar com projetos relacionados.
Algumas pessoas(e eu me incluo nessa) tem começado blogs de fotos por lá. Nós temos recebido feedbacks
muito positivos da comunidade através disso, e também utilizamos para comunicar as novidades e updates
para a comunidade. 
                  




Thanks to the nature of the project, 
											we could eat our own dog food (so feel free to checkout 
											echowaves and run it on your own domain , or even 
											feel free to create a conversation (“convo”) on http:// 
											echowaves.com/). 
											Another very important thing is to make the links 
											•	 
											between your project and the github obvious. I placed  
											a link to the github location on the default landing page 
											and made it very explicit, And the very first link in my 
											README file points back to the http://echowaves.com/ site. 
											Sites like github are crucial in helping to get attention 
											•	 
											to your project. The reason you are putting it on github 
											is probably because you want to find contributors. Be 
											open to any type of help — content writers, developers, 
											spelling errors catchers, designers (the most difficult 
											to find), suggestion makers. But remember: you are in 
											charge. If you really want for your project to success, 
											you need to have a vision. Make sure you communi- 
											cate this vision whenever you get a chance, put it in on 
											your home page, make it the first thing in your README 
											file, talk about it in your blog. Do not start working on 
											every little feature suggested right away. Do not accept 
											every line of code people contribute, unless you have 
											worked with that person before and developed a trust 
											relationship. Real” book. 