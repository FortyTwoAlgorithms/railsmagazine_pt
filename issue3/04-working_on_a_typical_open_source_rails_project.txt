Trabalhando em um projeto Rails Open Source
por Dmitry Amelchenko                    

                                                       
Há muito o que dizer a respeito do modelo de desenvolvimento open source(OS).
Um projeto open source tradicional em Rails tem características específicas
comparado ao resto dos projetos open source. Um projeto opensource
tradicional normalmente tem um build que você pode fazer o download e instalar -
um arquivo tar, jar, lib ou mesmo um exe, enquanto no Rails isso é um Web Site.    
A complexidade de um deploy de uma aplicação web é talvez uma das razões
para que o projetos de web aplication open source não estejam no mainstream ainda. 
Rails por outro lado oferece uma oportunidade aos desenvolvedores de aplicações web que
pode ser facilmente instalada em diversos ambientes ou quantos hosts desejar.
Alguém pode perguntar: quando estamos desenvolvendo uma aplicação web, nós não queremos
rodá-la em um único host? Uma das razões para desenvolvimento de aplicações web open source
seria o fato de que algumas indústrias ainda tem regras rígidas e não aceitariam compartilhar 
e enviar dados através de algum serviço web 2.0, mas se o código fonte para tal serviço
é disponibilizado gratuítamente e pode ser instalado dentro do firewall da empresa, 
todos estaríam felizes. Outra razão para as pessoas escolherem criar uma aplicação web 
open source é a disponibilidade de ferramentas avançadas que são distribuídas gratuitamente
caso seu código seja open source.  Nesse artigo vou falar sobre alguns desses serviços.

E por fim, mas não menos importante é a disponibilidade de talentos - 
se você está trabalhando em um projeto open source realmente interessante usufruindo dos poderes da Web,
a chance de você estar trabalhando junto com os melhores programadores é muito grande. 
Seja qual for a razão para fazer um projeto Rails open source, é possível
encontrar uma lista deles em duas fontes:
— http://wiki.rubyonrails.com/rails/pages/OpenSourceProjects 
e http://www.opensourcerails.com/. 
Para mim tudo começou lendo o livro  “Getting real” da 37Signals — 
ele está disponível gratuítamente em  https:// 
gettingreal.37signals.com/ ou http://gettingreal.37signals.com/GR_por.php. 
Pra resumir; a 37Signals 
é a melhor no que faz. Eles estão fora dos padrões da industria mundial, 
afinal de contas eles são os criadores do Rails. o livro fala principalmente sobre o senso comum
quando o assunto é desenvolvimento de software. Eu fiquei muito empolgado em descobrir mais sobre os 
produtos web 2.0 que a 37Signals oferece. Um dos projetos simples mas muito útil que eu quis começar
a usar foi o "Campfire" -  uma aplicação web de chat. Mas tão logo eu comecei a promover 
o Campfire na empresa, eu percebi que não iria funcionar prá nós. Eu trabalho para uma dessas
empresas que so extremamente preocupadas em perder informações sigilosas na web.
Mas eu estava perplexo e sentindo que a ferramenta de chat era exatamente o que minha 
empresa necessitava pra melhorar a colaboração entre todos. Então eu decidi começar minha 
própria aplicação web de chat.        

Primeiramente eu apenas queria escrever algo muito próximo ao "Campfire". Foi depois,
baseado no feedback dos usuários, que percebi que chat agregados de redes sociais 
eram muito mais úteis e poderosos. Minha intenção também era ter o maior número de 
desenvolvedores do meu escritório interessados. Então, tornar o projeto open source
não era um requerimento inicial. Mas pra facilitar minha vida e evitar questões da gerência,
como "pra que você precisa desse servidor...", "nós não temos o que você está procurando aqui...",
"nós não podemos aprovar um projeto não realionado a empresa nesses servidores...", "precisa ser
aprovado pelos diretores...", "se você está fazendo isso significa que você tem muito tempo livre...",
eu decidi não entrar na burocracia da empresa e tocar o projeto sozinho.
Eu iria falar com o pessoal técnico da empresa mais tarde, quando o projeto estivesse rodando.
Olhando pra trás, eu percebo que tornar o projeto open source foi uma das melhores
decisões da minha vida. O próximo passo é descobrir como rodar o projeto sem gastar muito 
dinheiro do meu bolso. Nós vivemos em tempos estranhos onde você consegue muita coisa de graça.

Não é mais do tipo "você tem o que você pagou" - de graça não significa ruim, normalmente é o contrário,
"grátis" significa o melhor. E é claro, não é o melhor porque é grátis, mas porque é open source.
Quanto a tecnologia, Ruby on Rails foi minha primeira escolha, grátis, elegante, suporte
de uma comunidade incrível - e há algo que preciso dizer mesmo com o risco de chover no molhado.
Como todo bom profissional, eu não poderia deixar de colocar o código em algum controlador de versão.
Existem milhares de opções. Git vem fazendo cada vez mais barulho. Existem diversos sites que oferecem 
hospedagem em repositórios git. Mas há algo que deve ser dito sobre o http://github.com.
Primeiro de tudo ele te oferece 100M para repositórios públicos de graça(o que significa muitos
projetos open source). Mas essa não é a parte mais importante. O que faz o github ser diferente 
dos outros é o aspecto de rede social. É essencial que seu projeto open source seja visualizado por outros.
O projeto que comecei esta hospedado em http://github.com/dmitryame/echowaves/ e no momento
que escrevo, ele tem 18 seguidores - não muito, mas mais do que eu poderia esperar em um projeto de 
um mês. E a parte legal é que você não está apenas limitado a desenvolver na sua empresa ou país.
É realmente globalizado. Um dos melhores contribuidores e líder técnico mora na Espanha - 
acredite ou não ele encontrou o projeto no github e gostou o suficiente pra participar.
Através do github eu fui apresentado a um programador da Inglaterra que também era inspirado 
pela 37signals e começou outros projetos muito bons - railscollab e rucksack, ele fez uma
série de sugestões muito boas que influenciaram muito no projeto.     

Eu não consigo expressar inteiramente o quanto eu me empolguei em trabalhar num projeto
com pessoas diferentes que eu nunca havia conhecido pessoalmente antes, e que estavam ao redor do mundo.
Redes sociais tem sido usadas pra diversos fins, mas na minha experiência se existe um benefício nelas, é esse.
Tão bom quanto parece, isso tudo não vem de graça-, existem algumas coisas pra se ter em mente.
Aqui está o que precisei fazer pras coisas acontecerem.
Certifique-se de escrever um ótimo README no seu projeto. Ele aparecerá no home page do seu 
projeto no github e é muito comum as pessoas julgarem seu projeto baseado nas primeiras impressões
que tiveram pelo README. Portanto garanta que existe um bom sumário para rodar seu projeto
assim como detalhes de instalação. Na minha opnião, isso é tudo que deve aparcer no arquivo README.
Se você começar a colocar mais coisas nele e ele ficar grande, ele vai distrai a atenção e as pessoas
o abandonarão.        

Próximo, garante uma instalação demo do seu projeto para que as pessoas possam testar antes de 
tomar a decisão de instalar o projeto em suas máquinas locais. De preferência isso deveria 
ter um servidor dedicado com o nome do seu peojeto no github. Minha referência de instalação 
por exemplo é o http://echowaves.com/. Aualmente ele é mais que uma referência de instalação.
Os desenvolvedores que trabalham na aplicação utilizam pra colaborar com projetos relacionados.
Algumas pessoas(e eu me incluo nessa) tem começado blogs de fotos por lá. Nós temos recebido feedbacks
muito positivos da comunidade através disso, e também utilizamos para comunicar as novidades e updates
para a comunidade. 

Graças a natureza do projeto, nós podemos tomar nossas próprias decisões (então sinta-se livre para 
baixar o projeto e rodar no seu próprio servidor, ou mesmo sinta-se a vontade para criar uma conversa
("convo") no http://echowaves.com/).

Outro ponto importante é deixar os link claros entre seu projeto e o github.
Eu coloquei um link para o github na página inicial tornando bem explícito. E o primeiro
link no meu arquivo README aponta de volta para o site do http://echowaves.com/. 

Sites como o github são essenciais para ajudar a fazer com que seu projeto receba atenção.
A razão que você está colocando o projeto no github é provavelmente porque você quer achar colaboradores.
Esteja aberto a qualquer tipo de ajuda - escritores de conteúdo, desenvolvedores,
pessoas que encontram erros, designers(os mais difíceis de encontrar), pessoas que dão sugestões.
Mas lembre-se: você está no comando. Se você realmente quer ter sucesso nesse projeto, você
precisa ter visão. Tenha certeza de comunicar suas pretenções sempre que tiver chance,     
coloque-a na home page, faça isso ser a primeira coisa no README, fala sobre isso no blog.
Não comece a trabalhar em toda e qualquer funcionalidade sugerida na mesma hora. Não aceite
toda linha de contribuição de código, a menos que você tenha trabalhado com essa pessoa antes 
e desenvolvido um bom relacionamento. Leia mais sobre isso no livro "Getting in Real".
                                                    
É essencial manter a comunidade informada sobre funcionalidades que estão sendo desenvolvidas
e outras que estão panejadas para serem implementadas. inicialmente eu tinha uma conta gratuita
no http://lighthouseapp.com/, mas ela só dava suporte a 2 usuários por projeto (pra mais eu teria que pagar
e eu sou pão duro quando o assunto é desenvolvimento open source ;-)). Então eu achei o Google Code como alternativa.
Ele inclui todo o suporte necessário para o desenvolvimento open source,
incluindo SVN, mas como eu já tinha começado a usar o github, eu estava apenas interessado nas
características de "issue tracking" do Google Code. Se você se sente mais confortável com o SVN,
você pode usar o Google Code para versionamento, mas para mim os pontos positivos do Google Code
não superavam o github. A boa nova é que graças a competição sadia entre as hospedagens de projetos
open source, você pode escolher em cada um o que é melhor pra você. Aqui está um exemplo
de como os usuários acompanam a lista de atividades http://code.google.com/p/echowaves/issues/list/.

A próxima preocupação ao organizar um projeto Rails open source é a questo da infraestrutura em que ele 
irá rodar. Existem algumas opções disponíveis. Eu inicialmente hospedava meu site em um computador 
em baixo da minha mesa de trabalho. Mas rapidamente percebi que tercerizar a infraestrutura era uma
a melhor coisa a se fazer. Se você está pensando seriamente em fazer que seu projeto 
aparece e seja falada pelas pessoas, você deve garantir que ele esteja rodando 24/7 e a banda deve ser 
boa suficiente para causar uma boa impressão nos visitantes - os internautas tem expectativas muito 
altas hoje em dia. Essa é a única coisa que você deve esperar ter que pagar, nada muito alto, 
mas vai sair do seu bolso, portanto faça a decisão com calma. Existe muitos hosts que suportam hospedagens 
Rails como http://www.engineyard.com/ e http://www.slicehost.com/.
Eu pessoalmente prefiro a força e flexibilidade dos web services da Amazon. Leia mais sobre eles
aqui http://aws.amazon.com/. EC2 é fácil de configurar e usar. Ele adicionam novas funcionalidades constantemente.
  
Eles oferecem um IP estático - algo essencial em um host sério. E eles suportam persistência de arquivos
em massa no S3. Escalar é fácil, a banda é excelente, a taxa é justa, sem custos de contrato ou custos
escondidos - apenas use o que você pode pagar no momento e pague apenas pelo que usar. No futuro quando 
seu site crescer e atingir milhões de usuários e os investidores começarem a te fazer propostas, você
será capaz de escalar de olhos fechados. Mas essa é uma história para um outro artigo.           

Depois de você ter feito as configurações do projeto e desenvolvedores começarem a contribuir, 
sua referência de instalaçnao estiver boa e você tiver algo para mostrar, então é hora de começar a promover
seu projeto. Pra mim o lugar mais natural para isso é no trabalho. Afinal, o projeto foi inicialmente idealizado
como uma ferramenta de colaboração para a empresa. Eu instalei a aplicação no meu sandbox pessoal e fiz uma 
apresentação aos desenvolvedores. Durante a apresentação, não esqueça de citar que você está procurando colaboradores. Depois, procure sua comunidade Ruby on Rails, apresentando nos encontros e reuniões dos grupos,
enviando emails, explicando sobre você e sobre o projeto, citando que você está aberto a sugestões e 
voluntários. Tenho que fazer um comentário sobre o suporte da comunidade: se você se deparar com dificuldades
técnicas no projeto, a lista de discussão é uma ótima fonte - não deixe de usar. 

Por exemplo, quando eu estava procurando por uma biblioteca que suportasse chat no browser, antes de perder
muito tempo com pesquisas, eu perguntei na lista de usuários Ruby de Boston. Eu recebi sugestões para
usar o Orbited, e essa acabou sendo uma das melhores decisões arquiteturais que fiz no projeto.
orbited é fácil de instalar e configurar além de ser muito estável. Eu chego a esquecer que estou usando-o -
ele funciona como uma máquina bem calibrada, e e você nunca precisa reiniciar (talvez alguma vez em alguns meses 
quando um novo release aparece).

Em um projeto open source você tem que fazer de tudo um pouco. Ninguém vai fazer nada pra você se 
você não quiser. Fique atento as estatísticas e tente entender as metricas que estão disponíveis pra você.
Um simples número de hits por dia é importante mas não suficiente pra saber o que realmente está acontecendo.
use algum serviço de monitoramento grátis. Eu uso o http://pingability.com. 
Também é crucial seguir alguns guias de posicionamento em sites de busca. Ítens como deixar corretamente
o título da página, metadados, etc... Existem ferramentas ótimas como o Google webmaster para isso (https://www.google.com/webmasters/tools). 

Se suas estatísticas não forem tão altas inicialmente, não espere que elas crescam rapidamente,
demanda muita paciência e atenção diária (pode levar meses). Ainda, tenha certeza de analizar as 
sugestões da ferramenta Google webmaster e tente colocá-las no ar o quanto antes.
            
Existem provavelmente mais uma série de coisas que você pode fazer pra que seu projeto open source
seja um sucesso. basicamente tente atingir o senso comum - é tudo sobre senso comum como dito no "Getting Real"
da 37signals. Seu trabalho como criador do projeto é encontrar as melhores alternativas que funcionem para você.
Apenas lembre-se, quando você está criando um projeto open source, a coisa mais difícil é fazer com que
outras pessoas se importem com ele da mesma forma que você se importa -se você atingir esse objetivo, o sucesso
aparecerá. Seja apaixonado e honesto, mesmo se você não for o desenvolvedor Rails mais experiente do mundo
mas ame o que você está fazendo, esse é com certeza o caminho para o sucesso.
                              
        


EchoWaves Overview 
por Khaled Al-Habache 

Echowaves é um prjeto ambicioso com muitas funcionalidades interessantes.
Você pode utilizá-lo como um tipo de Campfire gratuito para chat.
Nós, da equipe da RailsMagazine, utilizamos para organizar nossa reuniões
numa conversa privada(Convo). Entretanto isso é apenas uma parte. Echowaves 
acrescenta a característica de rede social ao chat.
Você pode criar uma nova conversa ou compartilhar seus pensamentos, 
ver conversas de outros, segui-los e descobrir as conversas mais interessantes 
pra eles. Echowaves também pode ser utilizado como um fórum web2.0,
onde tópicos e respostas aparecem instantâneamente. Outra coisa legal é
a possibilidade de utilizar fotos e vídeos e anexar arquivos.
isso torna a conversa mais interativa. Echowaves atua como um provedor OpenAuth
e exporta dados em vários formatos para ajudar os desenvolvedores a tornar
seus dados públicos. Se você gosta de chat, blog, fotos e compartilhar coisas
com amigos ou apenas se socializar - experimente o EchoWaves.