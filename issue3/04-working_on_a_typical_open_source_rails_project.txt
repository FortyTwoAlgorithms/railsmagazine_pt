Trabalhando em um projeto Rails de código aberto
por Dmitry Amelchenko                    

                                                       
Há muito o que dizer a respeito do modelo de desenvolvimento open source(OS).
Um projeto open source tradicional em Rails tem características específicas
comparado ao resto dos projetos open source. Um projeto opensource
tradicional normalmente tem um build que você pode fazer o download e instalar -
um arquivo tar, jar, lib ou mesmo um exe, enquanto no Rails isso é um Web Site.    
A complexidade de um deploy de uma aplicação web é talvez uma das razões
para que o projetos de web aplication open source não estejam no mainstream ainda. 
Rails por outro lado oferece uma oportunidade aos desenvolvedores de aplicações web que
pode ser facilmente instalada em diversos ambientes ou quantos hosts desejar.
Alguém pode perguntar: quando estamos desenvolvendo uma aplicação web, nós não queremos
rodá-la em um único host? Uma das razões para desenvolvimento de aplicações web open source
seria o fato de que algumas indústrias ainda tem regras rígidas e não aceitariam compartilhar 
e enviar dados através de algum serviço web 2.0, mas se o código fonte para tal serviço
é disponibilizado gratuítamente e pode ser instalado dentro do firewall da empresa, 
todos estaríam felizes. Outra razão para as pessoas escolherem criar uma aplicação web 
open source é a disponibilidade de ferramentas avançadas que são distribuídas gratuitamente
caso seu código seja open source.  Nesse artigo vou falar sobre alguns desses serviços.
E por fim, mas não menos importante é a disponibilidade de talentos - 
se você está trabalhando em um projeto open source realmente interessante usufruindo dos poderes da Web,
a chance de você estar trabalhando junto com os melhores programadores é muito grande. 
Seja qual for a razão para fazer um projeto Rails open source, é possível
encontrar uma lista deles em duas fontes:
— http://wiki.rubyonrails.com/rails/pages/OpenSourceProjects 
e http://www.opensourcerails.com/. 
Para mim tudo começou lendo o livro  “Getting real” da 37Signals — 
ele está disponível gratuítamente em  https:// 
gettingreal.37signals.com/ ou http://gettingreal.37signals.com/GR_por.php. 
Pra resumir; a 37Signals 
é a melhor no que faz. Eles estão fora dos padrões da industria mundial, 
afinal de contas eles são os criadores do Rails. o livro fala principalmente sobre o senso comum
quando o assunto é desenvolvimento de software. Eu fiquei muito empolgado em descobrir mais sobre os 
produtos web 2.0 que a 37Signals oferece. Um dos projetos simples mas muito útil que eu quis começar
a usar foi o "Campfire" -  uma aplicação web de chat. Mas tão logo eu comecei a promover 
o Campfire na empresa, eu percebi que não iria funcionar prá nós. Eu trabalho para uma dessas
empresas que so extremamente preocupadas em perder informações sigilosas na web.
Mas eu estava perplexo e sentindo que a ferramenta de chat era exatamente o que minha 
empresa necessitava pra melhorar a colaboração entre todos. Então eu decidi começar minha 
própria aplicação web de chat. 
Primeiramente eu apenas queria escrever algo muito próximo ao "Campfire". Foi depois,
baseado no feedback dos usuários, que percebi que chat agregados de redes sociais 
eram muito mais úteis e poderosos. Minha intenção também era ter o maior número de 
desenvolvedores do meu escritório interessados. Então, tornar o projeto open source
não era um requerimento inicial. Mas pra facilitar minha vida e evitar questões da gerência,
como "pra que você precisa desse servidor...", "nós não temos o que você está procurando aqui...",
"nós não podemos aprovar um projeto não realionado a empresa nesses servidores...", "precisa ser
aprovado pelos diretores...", "se você está fazendo isso significa que você tem muito tempo livre...",
eu decidi não entrar na burocracia da empresa e tocar o projeto sozinho.






                           
								I was going to approach the corp tech again later, when the 
								project is off the ground and kicking. 
								Looking back, I think the decision to opensource the proj- 
								ect was one of the best decisions of my life. 
								The next step was to figure out how to run the project and 
								not to spend too much money out of my pocket. We live in a 
								weird time when you can get a lot for free. And it is not like 
								“you get what you pay for” any more — free does not mean 
								bad at all, usually the opposite, “free” reads the best. And of 
								course it is the best not because it is free, but because it is 
								opensource. 
								ing lately has drawn a lot of scepticism, but in my experience 
								if there is a benefit from the Internet and Social Networking, 
								then that’s it. 
								As great as it sounds, it does not come for free–, there are 
								few simple things to keep in mind. Here is what I had to do 
								make things moving. 
								Make sure to write reasonable 
								•	 README in you rails 
								project. It will appear on the  repo’s home page for your 
								project on github and most often people will judge your 
								project based on the first impression they get from that 
								Dmitry Amelchenko specializes in 
								web applications development for financial 
								companies in New York City and Boston 
								area. Throughout his career he worked on 
								a number of highly visible mission critical 
								web sites as a software engineer, mentor 
								and architect. Experienced in C++, Java and 
								Ruby languages. Witnessed first hand the evolution of web 
								applications development from CGI, to J2EE, to Ruby on Rails. 
								Currently works on number of open source projects hosted on 
								github at http://github.com/dmitryame/. 
								