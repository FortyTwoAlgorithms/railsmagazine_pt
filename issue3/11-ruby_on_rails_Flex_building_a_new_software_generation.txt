Ruby on Rails & Flex: Construindo uma nova geração de software
por Arturo Fernandez

Introdução

Uma nova geração de aplicações está conquistando desenvolvedores e usuários através de sua bela interface e das grandes possibilidades que ela oferece.
Estamos falando sobre RIA (Rich Internet Application), um novo tipo de software que combina o melhor das aplicações web e desktop.

Existem muitas situações onde poderíamos nos beneficiar da combinação da usabilidade do desktop com os recursos de uma aplicação web.
Considere um programa que organiza sua coleção de MP3. Obviamente, será necessário que ele acesse os arquivos do sistema. Mas também não seria ótimo que ele pudesse acessar algumas informações da internet, como a biografia do artista ou as notas da trilha ? Parece legal, você não acha ?

Rich internet applications são mais complexas que aplicações web normais. Por isso, elas geralmente são desenvolvidas com a ajuda de um framework.

Atualmente, temos várias opções para escolher, tanto open-source como proprietária. Para desenvolvedores Java, Open-Laszlo e JavaFX vale dar uma olhada. Se você prefere tecnologias Microsoft, existe o Silverlight. Mas, nos últimos dois anos um framwork em particular vem crescento muito rápido: Adobe Flex.

Flex é um framework RIA open source desenvolvido pela Adobe. Ele possibilita que você construa aplicações RIA usando uma linguagem de programação parecida com ActionScript e uma linguagem de markup chamada MXML para a interface. Foi inicialmente lançado em 2004 e sua última versão 3 foi lançada em Março de 2009.

O Flex possui dois componentes: um SDK (Software Development Kit) e um runtime onde cada aplicação é visualizada. O SDK é open source (lançado sobre a Licensa Mozilla Public), enquanto a runtime é o famoso Adobe Flash Player que tem sua licensa proprietária.

Por sua runtime ser baseada no flash, aplicações Flex são cross-platform por default. E eles funcionam não somente em desktops mas também em vários dispositivos móveis como celulares e PDAs.
Além disso, o SDK Flex permite desenvolver em diferentes sistemas operacionais como GNU/Linux, MS Windows e Mac OS X, já que os binários gerados também são cross-platform.

Enquanto você pode desenvolver suas aplicações Flex sem comprar nada, a Adobe também oferece uma ferramenta de desenvolvimento adicional chamada Flex Builder.
Uma moderna IDE (Integrated Development Enviroment) visual construída sob o Eclipse. Apesar do seu custo, o Flex Builder é muito útil para desenvolver a interface do usuário da sua aplicação.

Porque precisamos de aplicações RIA?

Uma aplicação desktop clássica geralmente roda em um PC ou Mac e não necessita de uma conexão de rede. Um bom exemplo seria um editor de textos como o Apple Pages, Microsoft Word ou OpenOffice Writer. Por outro lado, uma aplicação web roda em um servidor, e muitos clientes acessam ela simultaneamente usando browsers web.

Esses dois tipos de aplicação tem suas vantagens e desvantagens. Obviamente são diferentes de um ponto de vista técnico. Aplicações Desktops tem todo o poder de vários toolkits para criar interfaces ricas. E são as mais rápidas. E você não tem as inconsistências de renderização como em uma aplicação baseada em browser. Por outro lado as aplicações web são fáceis de fazer deploy e rodam em qualquer plataforma.

------------------------
Arturo Fernandez é um empresário, engenheiro de software, escritor técnico e entusiasta de software free/open-source. Sua experiência profissional inclui serviços como engenheiro de software, consultor, administrador de sistemas e gerente de projeto trabalhando com tecnologias como J2EE, PHP e Rails. Atualmente elemora em Andalucia, Espanha onde ele fundou a BSNUX Software Factory (http://www.bsnux.com), uma empresa especializada em RIA e aplicações móveis. Ele pode ser contactado em arturo@bsnux.com.
--------------------------

Tecnologias como AJAX trás aplicações web um pouco mais perto da performance de uma aplicação desktop, ao custo de uma alta complexidade. Desenvolvedores são forçados a trabalhar em múltiplas linguagens: JavaScript para o front-end e uma outra linguagem como Ruby para o back-end. Mas com Flex, você pode desenvolver uma aplicação do começo ao fim em apenas uma linguagem.

Desenvolvendo uma aplicação RIA podemos juntar o melhor do desktop com o melhor da web, resultando numa aplicação multi-plataforma com uma interface boa e flexível que pode trocar dados com uma outra aplicação usando protocolos padrões e tecnologias través da internet.

Agora vamos dar uma olhada em como podemos usar o Adobe Flex e Rails para desenvolver uma ótima aplicação em pouco tempo.

Front-End e Back-End

Uma tipica aplicacao web rica e composta por 2 componentes principais: um front-end que e o cliente e um back-end que contem logica de negocios e dados.

Quando voce escreve uma aplicacao em Adobe Flex, voce tera um executavel que roda no Adobe Flash Player, pode ser dentro de um browser ou em qualquer outro dispositivo.

O back-end e uma aplicacao web feita usando qualquer tecnologia como J2EE (Java Enterprise Edition), PHP ou Rails. Vamos usar Rails porque e nosso framework favorito e porque ele e um bom complemento para o Flex.

O proximo passo e conhecer como o front-end se comunica com o back-end. Vamos entrar nos codigos!

- Como o Flex se comunita com o Rails

Existem duas maneiras de fazer a comunicacao entre Flex e Rails. A primeira e o AMF (Action Message Format), um protocolo de troca de dados atraves do tradicional RPC (Remote Procedure Call). A segunda e via HTTPService, um mecanismo que permite que o Flex faca uma chamada para o back-end usando o protocolo HTTP.

AMF e bom para mapear objetos no servidor com objetos no cliente. Usando AMF conseguimos mapear um objeto ActionScript com um objeto Ruby, como uma instancia do modelo. Ele possibilita tambem fazer uma chamada a um metodo controller direto do ActionScript, enviando um objeto como parametro.

Vamos ver como usar AMF e HTTPService com Flex na pratica.

Como exemplo, vamos criar uma aplicacao com operacoes de CRUD (Create, Read, Update e Delete) de uma tabela de Produtos de um banco de dados. Primeiro, vamos criar um front-end em Flex, e depois um back-end em Rails.

Primeiro, precisamos criar um novo projeto Flex. A forma mais facil para se fazer isso e usar o Flex Builder. Selecione File > New > Flex Project. Nomeie o projeto e o MXML principal de rails_magazine. Certifique-se de checkar a opcao "Web Application (Runs on Flash Player)", como mostrado na figura 1. Esse wizard ira criar todos os arquivos necessarios pela aplicacao.

O diretorio mais importante para nos e o src/. Aqui e onde nosso codigo vai ficar. Usando Flex Builder, podemos construir nossa GUI rapidamente via drag & drop. Os componentes estao na esquerda e workspace e a area principal. O Datagrid e um otimo componente fornecido pelo Flex. Ele e usado para exibir os dados carregados do banco de dados e possibilita as operacoes basicas como ordenacao e filtro.

Os arquivos binarios do Flex precisando ficar acessiveis via web. Entao vamos coloca-los no diretorio public da nossa aplicacao Rails. Isso e facil, so precisamos selecionar esse diretorio como Output folder, como mostrado na figura 2. Finalizado a GUI, podemos criar o back-end.

Primeiro, vamos criar uma aplicacao Rails usando o comando rails. Segundo, vamos precisar de um modelo para armazenar os dados dos produtos. Para isso execute esse comando:

$ script/generate model Product name:string description:string price:float

Agora precisamos configurar nosso banco de dados. Por default o Rails oferece uma configuracao simples do banco de dados SQLite, entao iremos usar este. O proximo passo e executar a migration:

$ rake db:migrate
