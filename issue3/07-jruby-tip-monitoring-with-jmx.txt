Dica de JRuby: Monitoramento com JMX
por Joshua Moore


    O que é JMX?

    JMX (Java Management Extensions) é uma ferramenta JavaTM usado para monitorar e controlar um processo JavaTM. Como JRuby é um processo JavaTM, ele também pode ser monitorado usando JMX. A grande coisa sobre JMX é que não é apenas uma forma de comunicação com o processo. Você também pode usar JMX para alterar as configurações dentro do processo JRuby/JavaTM, e, dentro de sua própria aplicação. Este artigo irá abranger apenas uma introdução sobre JMX. O objetivo é ajudar você a começar a usá-lo.

    JConsole

    JConsole é o cliente JMX padrão fornecido com o JDK (JavaTM Development Kit). Infelizmente, não é parte do JRE (Java ™ Runtime Environment) Portanto, se você não o tem, você precisará baixar e instalar o JDK. JConsole é uma simples aplicação que se conecta a um processo JavaTM e exibe as informações coletadas para o usuário. Também pode ser usado para definir as variáveis dentro do processo JavaTM. Para começar com JConsole simplesmente execute um desses comandos (dependendo do tipo de sistema operacional):
  - Windows: c:\path\para\java\bin\jconsole.exe
  - Linux: jconsole (Esperando que tenha sido adicionado ao path junto aos comandos JavaTM) ou /path/para/java/bin/jconsole
  - Mac: Desculpe, eu não posso tenho certeza do Mac agora, mas eu acho seria semelhante ao do Linux (atualmente o Fundo Mac Josh Moore está aceitando doações).

  * Um bug com JMX no Linux é que JMX utiliza o endereço IP encontrado no diretório /etc/hosts para conectar-se ao processo de JavaTM. Portanto, se você executar hostname -i na máquina que está rodando o processo JRuby que você deseja monitorar, e a saída não é o seu endereço IP, então você precisa modificar o /etc/hosts e reinicie a rede ou seu computador.

  * Você deve estar ciente de que as informações recolhidas pelo JConsole ficam armazenadas na sessão, por isso quando a ligação é encerrada todas as informações recolhidas serão perdidas.

     Configuração do JRuby/JavaTM processo

     Agora que JConsole está executando, você precisa se conectar a um processo para que você possa monitorá-lo. Com JMX você pode se conectar a qualquer processo local, sem qualquer alteração do *. Basta clicar sobre o processo e clique em conectar-se (ver imagem). Uma vez conectado será mostrado informações que estão sendo coletados em tempo real. A guia Overview dá vários gráficos de alto nível do uso atual do sistema e seus recursos (memória, CPU, etc). As guias Memory, Threads, Classes e VM Summary fornecer mais informações sobre cada tópico respectivo. A guia MBeans é especial porque mostra a saída recebida ...

[JConsole: New Connection]

 ... a partir da conexão JMX. Além disso, é utilizada também se você deseja alterar qualquer uma das configurações. Depende da versão do JConsole que vem com o JDK.

 * Se você estiver usando JConsole nas versões anteriores a 6, então você terá de definir esta variável em Java:

    -Dcom.sun.management.jmxremote (java-Dcom.sun.management.jmxremote)

[Java Monitoring & Management Console]

  ou para uso JRuby:

    jruby -J-Dcom.sun.management.jmxremote

  Monitorar processos locais não é muito emocionante. Muito mais interessante e útil é a monitorização de processos em servidores remotos. Por questões de segurança, se você quiser usar JMX para monitorar um processo JRuby remoto você vai precisar passar algumas variáveis para o processo JavaTM quando é iniciado. Para ser simplista, basta iniciar o processo de JavaTM assim (você pode escolher qualquer número de porta):

    java -Dcom.sun.management.jmxremote.port=9999 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false

    Estas opções são usadas com JavaTM ou um servidor de aplicativos JavaTM como Glassfish, Tomcat, Jetty, etc A fim de acompanhar um processo iniciado com JRuby você terá de preceder as variáveis com -J:

    -J-Dcom.sun.management.jmxremote.port=9999 -J-Dcom.sun.management.jmxremote.authenticate=false -J-Dcom.sun.management.jmxremote.ssl=false

    Uma vez que o processo é iniciado com essas variáveis você está pronto.

  * Você deve estar ciente que quando se inicia um processo de JavaTM com estas opções você estará abrindo uma enorme brecha de segurança no seu servidor. Infelizmente, eu não tenho tempo para cobrir a configuração segura. Por favor, consulte a seção de recursos para um artigo sobre este tema.

    Depois que o processo está funcionando, na caixa de conexão JConsole, clique em "Remote Process" e digite o nome do host ou o endereço IP seguido do número da porta (ou seja, localhost:8004). Uma vez estabelecida a ligação você pode usar JConsole da mesma forma que você faria para um processo local.

[Joshua Moore picture in the middle of text]

Joshua Moore cresceu em uma fazenda na Pensilvânia, EUA. Na fazenda, aprendeu que o trabalho duro não é fácil e que ele não gostava de ficar sujo. Então ele começou a descer o caminho da programação (menos sujeira, mas ainda trabalho duro). Ele gostava de Java e trabalhou principalmente com o desenvolvimento de aplicações desktop até cerca de um ano atrás, quando ele decidiu que não podia ignorar desenvolvimento web por mais tempo (ele ignorou antes porque não queria lutar com diferentes navegadores para ter suas aplicações funcionando corretamente). Mas, renderizando em navegadores diferentes ou não, aqui ele está usando Ruby on Rails, principalmente JRuby on Rails, e amando JRuby on Rails. Ele escolheu o Rails porque e simples, poderoso e nenhuma configuração e necessária. Confira o seu blog: http://www.codingforrent.com/, Twitter: @Kaiping, email: josh@codingforrent.com. Josh é um colunista Rails Magazine, onde pública regularmente sobre JRuby.

Conclusão

Esta é uma rápida introdução ao JMX. Este artigo tem apenas arranhou a superfície do que JMX pode realmente fazer. O verdadeiro poder do JMX pode ser aproveitado de muitas maneiras diferentes. Algumas destas formas são: escrever o seu próprio MBeans para coletar ou conjunto de informações personalizadas e escrever o seu próprio cliente JMX para registrar o desempenho de sua aplicação. Para mais informações sobre estes tópicos avançados, de uma olhada seção de recursos. 

Recursos
JMX home page
http://java.sun.com/javase/technologies/core/mntr-mgmt/javamanagement/
Mais informações e Autenticação JMX
http://java.sun.com/j2se/1.5.0/docs/guide/management/agent.html
jmx4r, gem para criar client JMX in Ruby.
http://github.com/jmesnil/jmx4r/tree/master
jmx, gem para criar cliente JMXi e MBeans customizados
http://ruby.dzone.com/news/jmx-gem-released
Como escrever MBeans customizados
http://docs.sun.com/app/docs/doc/816-4178/6madjde4b?a=view
Usando JConsole (Também explica o significado dos vários monitoramentos de mémoria no JConsole)
http://java.sun.com/javase/6/docs/technotes/guides/management/jconsole.html
